(re-seq #"\w" "AEIOULNRST")
(map println "Hello")
(map println '("Hello"))
(println (first ["WORLD" "GSCHOOLERS"]))
(def d {1 ["APPLE" "ARTICHOKE"], 2 ["BOAT" "BALLERINA"]})
(map (fn [k v] (println k)) d)
(map println d)
(map #(println (first %1)) d)
(map #(println (second %1)) d)
(map #(let [key (first %1) values (second %1)] (println key)) d)
(map #(let [key (first %1) values (second %1)] (println values)) d)
(map #(let [key (first %1) values (second %1)] (println key)) d)
(map (fn [e] (let [[key values] e] (println key))) d)
(map (fn [e] (let [[key values] e] (println values))) d)
(map (fn [e] (let [[key values] e] (map (fn [value] (list key value)) values))) d)
(map (fn [e] (let [[key values] e] (mapcat (fn [value] (list key value)) values))) d)
(mapcat (fn [e] (let [[key values] e] (mapcat (fn [value] (list key value)) values))) d)
(mapcat (fn [e] (let [[key values] e] (mapcat (fn [value] (list value key)) values))) d)
(mapcat (fn [e] (let [[key values] e] (mapcat (fn [value] (list (clojure.string/lower-case value) key)) values))) d)
(apply hash-map (mapcat (fn [e] (let [[key values] e] (mapcat (fn [value] (list (clojure.string/lower-case value) key)) values))) d))
(into (sorted-map) (apply hash-map (mapcat (fn [e] (let [[key values] e] (mapcat (fn [value] (list (clojure.string/lower-case value) key)) values))) d)))
