(inc \A)
(+ \A 0)
(+ (int \A) 0)
(char (+ (int \A) 0))
(char (+ (int \A) 1))
(format "%c%c" \A \B)
(format "%c%c" '(\A \B))
(def my-map {:key "foo|})
(def my-map {:key "foo"})
my-map
(dosync (alter assoc my-map :key-2 "bar"))
(dosync (alter my-map assoc my-map :key-2 "bar"))
(assoc my-map :key-2 "bar")
dosync (alter my-map assoc :key-2 "bar"))
(keys {1 "foo", 2 "bar"))
(keys {1 "foo", 2 "bar"})
(max (keys {1 "foo", 2 "bar"}))
(max (keys {1 "foo", 3 "baz", 2 "bar"}))
(max-key {1 "foo", 3 "baz", 2 "bar"})
(apply max (keys {1 "foo", 3 "baz", 2 "bar"}))
(apply max (keys {}))
(keys {})
(def robots {})
(defn next-robot-key []
  (if-let [robot-keys (keys robots)]
    (inc (apply max robot-keys))
    0))
(next-robot-key)
(def robots {0 "bob"})
(next-robot-key)
(def robots {0 "bob", 1 "jill"})
(next-robot-key)
(def robots {0 "bob", 1 "jill", 2 "brian"})
(next-robot-key)
(0 robots)
(get robots 0)
(get robots 1)
(get robots 2)
