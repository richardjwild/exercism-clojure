(count "abcdef")
(map list '(1 2 3) '(1 2 3))
(mapcat list '(1 2 3) '(1 2 3))
(mapcat list '("go" "yourself" "in") '("fuck" "right" "rectum"))
(mapcat list '("go" "yourself" "the") '("fuck" "up" "rectum"))
(map list "abc" "abc")
(- \b \a)
(int \a)
(map int (map list "abc" "abc))
(map int (map list "abc" "abc"))
(map vec "abc" "abc")
(defn difference [chars]
(nth '(:foo :bar) 2)
(nth '(:foo :bar) )
(nth '(:foo :bar) 1)
(nth '(:foo :bar) 0)
(defn distance-between [chars]
  (let [c1 (nth chars 0) c2 (nth chars 1)]
    if (= c1 c2) 0 1))
(defn distance-between [chars]
(let [c1 (nth chars 0) c2 (nth chars 1)]
  (if (= c1 c2) 0 1)))
(distance-between '(\a \a))
(distance-between '(\a \b))
(distance-between '(\b \b))
(distance-between '(\b \c))
(map distance-between (map list "abc" "abc"))
(map distance-between (map list "abc" "adc"))
(map distance-between (map list "abc" "abd"))
(apply + (map distance-between (map list "abc" "abd")))
(apply + (map distance-between (map list "abc" "abc")))
(apply + (map distance-between (map list "abc" "def")))
(int 1.5)
(int 1.9)
(int 2.0)
(int (Math/ceil 1.9))
(int (Math/ceil 1.1))
(int (Math/ceil 0.99))
(defn f [[a1 a2]] (println a1 a2))
(f "fee" "fi" "fo" "fum)
(f "fee" "fi" "fo" "fum")
(f ["fee" "fi" "fo" "fum"])
(f '("fee" "fi" "fo" "fum"))
(map + '(1 2 3 4))
(map + '(1 3 5 7) '(2 4 6 8))
