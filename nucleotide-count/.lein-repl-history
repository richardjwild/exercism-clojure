(frequencies "AAAAA")
(get \A (frequencies "AAAAA"))
(get (frequencies "AAAAA") \A)
(\A (frequences "AAAAAA"))
(\A (frequencies "AAAAAA"))
('\A (frequencies "AAAAAA"))
(def c \A)
c
(c (frequencies "AAA"))
('c (frequencies "AAA"))
(det (frequencies "AAA") c)
(get (frequencies "AAA") c)
(get (frequencies "ACAGGATCAG") c)
(get (frequencies "ACAGGATCAG") \A)
{\A (get (frequencies "ACAGGATCAG") \A)}
(create-map :foo "bar")
(hash-map :foo "bar")
(hash-map :foo "bar" :fred "sheila")
(clojure.string/includes? "ACGT" \X)
(clojure.string/includes? "ACGT" "X")
(contains? [\A \C \G \T] \X))
(contains? [\A \C \G \T] \X)
(contains? [\A \C \G \T] \G)
(contains-value? [\A \C \G \T] \G)
(get [\A \C \G \T] \G)
(contains? #{\A \C \G \T} \G)
(contains? #{\A \C \G \T} \X)
(defn count [base sequence]
  (if (contains? #{\A \C \G \T} base)
    (get (frequencies sequence) base 0)
    (throw (AssertionError (str "Invalid nucleotide " base)))))
(apply hash-map '(:foo "foo" :bar "bar"))
(apply hash-map '({:foo "foo"} {:bar "bar"}))
(apply hash-map '('(:foo "foo") '(:bar "bar")))
(def bases #{\A \C \G \T})
(defn count [base sequence]
  (assert (contains? bases base))
  (get (frequencies sequence) base 0))
(map (partial count "ATGCTAGCTAGCCCGAT") bases)
(map (fn [base] (count base "ATGCTAGCTAGCCCGAT")) bases)
(map (fn [base] (list base (count base "ATGCTAGCTAGCCCGAT"))) bases)
(mapcat (fn [base] (list base (count base "ATGCTAGCTAGCCCGAT"))) bases)
(apply hash-map (mapcat (fn [base] (list base (count base "ATGCTAGCTAGCCCGAT"))) bases))
(defn count [base sequence]
  (assert (contains? all-bases base))
  (println "I am counting!")
  (get (frequencies sequence) base 0))
(def all-bases #{\A \C \G \T})
(defn count [base sequence]
  (assert (contains? all-bases base))
  (println "I am counting!")
  (get (frequencies sequence) base 0))
(defn nucleotide-counts [sequence]
  (apply hash-map (mapcat #(list %1 (count %1 sequence)) all-bases)))
(nucleotide-counts "AGTCTCGCT")
